name: simple-fiber-app
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["main"]
    paths:
      - "fiber-path-routing/**"

  #    - '.github/**'
  pull_request:
    branches: ["main"]
  workflow_call:
    outputs:
      commit:
        description: "Short Commit Id"
        value: ${{ jobs.build-and-push.outputs.commit }}

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  FIBER_APP_DOCKER_IMAGE: ghcr.io/${{ github.repository }}/fiber-path-routing

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  run-vulnerability-scan:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3

      - name: Run OPA Conftest
        run: |
          cd fiber-path-routing
          docker run --rm -v $(pwd):/project openpolicyagent/conftest test --policy opa-docker-security.rego  Dockerfile

      - name: Build an image from Dockerfile
        run: |
          cd fiber-path-routing 
          docker build -t $FIBER_APP_DOCKER_IMAGE:${{ github.sha }} .

      - name: Run Trivy vulnerability scanner to notes-app docker image after build
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository }}/fiber-path-routing:${{ github.sha }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL"

  build-docker-images:
    needs: run-vulnerability-scan

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: check golang version
        if: always()
        run: go version

      - name: docker version and prune
        run: |
          docker -v
          docker image prune -a -f
          docker container prune -f

      - name: Build fiber_app
        run: |
          cd fiber-path-routing
          docker build . -f Dockerfile -t $FIBER_APP_DOCKER_IMAGE

      - if: github.event_name != 'pull_request'
        name: docker login and push all the images
        id: push-image
        run: |
          echo "${{ github.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          VERSION=${GITHUB_SHA::8}
          echo FIBER_APP_DOCKER_IMAGE=$FIBER_APP_DOCKER_IMAGE
          echo VERSION=$VERSION
          docker tag $FIBER_APP_DOCKER_IMAGE $FIBER_APP_DOCKER_IMAGE:$VERSION 
          docker push $FIBER_APP_DOCKER_IMAGE:$VERSION
          docker push $FIBER_APP_DOCKER_IMAGE

      - name: list docker images
        run: |
          docker images -a
  # deploy-to-aks-dev:
  #   needs: build-docker-images
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     - uses: actions/checkout@v3
  # - name: Azure login
  #   uses: azure/actions/login@v1
  #   with: # Set Azure credentials secret as an input
  #     creds: ${{ secrets.AZURE_CREDENTIALS }}

  # - name: RUN az Command
  #   run : |
  #      az account show
  #      az group list
  #     - name: Get K8s context
  #       uses: azure/aks-set-context@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}
  #         resource-group: aks-rg
  #         cluster-name: aks-dev-dev
  #       id: login

  #     - name: Create namespace
  #       run: |
  #         kubectl apply -f manifests/namespace.yaml

  #     - name: Create configmaps and secrets
  #       shell: bash
  #       continue-on-error: true
  #       run: |
  #         kubectl create configmap dbhost --from-literal=DATABASE_HOST=${{ secrets.DATABASE_HOST }} -n todolist --dry-run=client -o yaml | kubectl apply -f -
  #         kubectl create secret generic dbuserpass --from-literal=DATABASE_USER=${{ secrets.DATABASE_USER }} --from-literal=DATABASE_PASS=${{ secrets.DATABASE_PASS }} -n todolist --dry-run=client -o yaml | kubectl apply -f -
  #         kubectl create secret  docker-registry ghcr-cred --docker-username=${{ secrets.DOCKER_USER }} --docker-password=${{ secrets.DOCKER_PASSWORD }} --docker-email=${{ secrets.DOCKER_EMAIL}} -n todolist --dry-run=client -o yaml | kubectl apply -f -

  #     - uses: Azure/k8s-deploy@v4
  #       with:
  #         namespace: 'todolist'
  #         manifests: |
  #             manifests/postgres.yaml
  #             manifests/go-todo-api.yaml
  #             manifests/vue-todo.yaml
  #         strategy: basic
  #         action: deploy
